# Generated by Django 5.2.1 on 2025-05-17 05:06

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PremiumUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=255, unique=True)),
                ('subscription_start', models.DateField()),
                ('subscription_end', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255, unique=True)),
                ('chain', models.CharField(max_length=50)),
                ('first_seen', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('wallet_addresses', models.JSONField(blank=True, default=list)),
                ('is_premium', models.BooleanField(default=False)),
                ('premium_until', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AssetHolding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_symbol', models.CharField(max_length=50)),
                ('amount', models.DecimalField(decimal_places=18, max_digits=30)),
                ('current_price_usd', models.DecimalField(decimal_places=8, max_digits=20)),
                ('value_usd', models.DecimalField(decimal_places=2, max_digits=20)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='crypto_tax_api.wallet')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_hash', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField()),
                ('transaction_type', models.CharField(choices=[('buy', 'Buy'), ('sell', 'Sell'), ('swap', 'Swap'), ('transfer', 'Transfer')], max_length=20)),
                ('asset_symbol', models.CharField(max_length=50)),
                ('amount', models.DecimalField(decimal_places=18, max_digits=30)),
                ('price_usd', models.DecimalField(decimal_places=8, max_digits=20)),
                ('value_usd', models.DecimalField(decimal_places=2, max_digits=20)),
                ('fee_usd', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('cost_basis_usd', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('realized_profit_loss', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('needs_review', models.BooleanField(default=False)),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='crypto_tax_api.wallet')),
            ],
            options={
                'indexes': [models.Index(fields=['wallet', 'timestamp'], name='crypto_tax__wallet__c1d546_idx'), models.Index(fields=['wallet', 'asset_symbol'], name='crypto_tax__wallet__ed91d7_idx')],
            },
        ),
        migrations.CreateModel(
            name='TaxSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('total_proceeds', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('total_cost_basis', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('total_realized_gain_loss', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('short_term_gain_loss', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('long_term_gain_loss', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('total_fees', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tax_summaries', to='crypto_tax_api.wallet')),
            ],
            options={
                'unique_together': {('wallet', 'start_date', 'end_date')},
            },
        ),
    ]
